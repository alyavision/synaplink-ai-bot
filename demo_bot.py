#!/usr/bin/env python3
"""
–î–µ–º–æ-–≤–µ—Ä—Å–∏—è Telegram-–±–æ—Ç–∞ Synaplink
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Telegram API
"""

import asyncio
import logging
from config import Config
from openai_client import OpenAIClient
from application_handler import ApplicationHandler

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DemoBot:
    """–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–±–æ—Ç–∞"""
        self.openai_client = OpenAIClient()
        self.application_handler = ApplicationHandler()
        self.user_states = {}
        
    async def demo_conversation(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"""
        print("ü§ñ –î–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ Synaplink")
        print("=" * 50)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        print("\nüì± –î–ï–ú–û 1: –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é")
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç /start")
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–æ–≥–æ—Ç–∏–ø:", Config.LOGO_IMAGE_URL)
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
        print("‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏:")
        print("   - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:", Config.TELEGRAM_CHANNEL_LINK)
        print("   - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
        print("\nüì¢ –î–ï–ú–û 2: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª")
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ:", Config.TELEGRAM_CHANNEL_LINK)
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
        print("\nüí¨ –î–ï–ú–û 3: –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞")
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥'")
        print("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("‚úÖ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ OpenAI")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –î–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        print("\nü§ñ –î–ï–ú–û 4: –î–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
        test_messages = [
            "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö",
            "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?",
            "–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ?",
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω, —Ç–µ–ª–µ—Ñ–æ–Ω +7 999 123-45-67, email ivan@example.com"
        ]
        
        for i, message in enumerate(test_messages, 1):
            print(f"\n   –°–æ–æ–±—â–µ–Ω–∏–µ {i}: {message}")
            try:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                print("   ‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ OpenAI...")
                print("   ‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç (–∏–º–∏—Ç–∞—Ü–∏—è)")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 5: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        print("\nüìã –î–ï–ú–û 5: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
        sample_application = """
        [–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç]
        –ò–º—è: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤
        –¢–µ–ª–µ—Ñ–æ–Ω: +7 999 123-45-67
        Email: ivan@example.com
        –ó–∞–ø—Ä–æ—Å: –ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å–∞–π—Ç–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CRM —Å–∏—Å—Ç–µ–º–æ–π
        """
        
        print("   üìù –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É:")
        print(sample_application)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞—è–≤–∫–∏
        is_valid = self.application_handler.is_application(sample_application)
        print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –≤–∞–ª–∏–¥–Ω–∞—è: {is_valid}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞
        formatted = self.application_handler.format_application_for_working_chat(sample_application, 12345)
        print(f"   üì§ –ó–∞—è–≤–∫–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞:")
        print(f"   –î–ª–∏–Ω–∞: {len(formatted)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 6: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç
        print("\nüì§ –î–ï–ú–û 6: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç")
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç: {Config.WORKING_CHAT_ID}")
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 7: –°–±—Ä–æ—Å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        print("\nüîÑ –î–ï–ú–û 7: –°–±—Ä–æ—Å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /reset")
        print("‚úÖ –†–∞–∑–≥–æ–≤–æ—Ä —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è")
        print("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é")
        
        print("\n" + "=" * 50)
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    def test_openai_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI...")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            print(f"   API Key: {Config.OPENAI_API_KEY[:20]}...")
            print(f"   Assistant ID: {Config.OPENAI_ASSISTANT_ID}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            client = OpenAIClient()
            print("   ‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ thread (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞)
            print("   ‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_application_handler(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞—è–≤–æ–∫...")
        try:
            handler = ApplicationHandler()
            
            # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞
            test_app = """
            [–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç]
            –ò–º—è: –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤
            –¢–µ–ª–µ—Ñ–æ–Ω: +7 999 999-99-99
            Email: test@example.com
            –ó–∞–ø—Ä–æ—Å: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            """
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            is_app = handler.is_application(test_app)
            print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {is_app}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            parsed = handler.parse_application(test_app)
            if parsed:
                print(f"   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {len(parsed)} –ø–æ–ª–µ–π")
                for key, value in parsed.items():
                    if key != 'header':
                        print(f"      {key}: {value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            is_valid, message = handler.validate_application(test_app)
            print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {is_valid} - {message}")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ Synaplink")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        Config.validate()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–±–æ—Ç
    demo_bot = DemoBot()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    demo_bot.test_application_handler()
    demo_bot.test_openai_connection()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    await demo_bot.demo_conversation()
    
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather")
    print("2. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
    print("3. –û–±–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: python bot.py")

if __name__ == "__main__":
    asyncio.run(main())
