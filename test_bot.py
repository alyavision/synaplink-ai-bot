"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ Synaplink
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Telegram API
"""

import os
import sys
from unittest.mock import Mock, patch
from config import Config
from openai_client import OpenAIClient
from application_handler import ApplicationHandler

def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        test_env = {
            'TELEGRAM_BOT_TOKEN': 'test_token_123',
            'OPENAI_API_KEY': 'test_openai_key_456',
            'OPENAI_ASSISTANT_ID': 'test_assistant_789',
            'TELEGRAM_CHANNEL_LINK': 'https://t.me/test_channel',
            'WORKING_CHAT_ID': '-1001234567890',
            'LOGO_IMAGE_URL': 'https://example.com/logo.png'
        }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        for key, value in test_env.items():
            os.environ[key] = value
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        import importlib
        import config
        importlib.reload(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        assert config.Config.TELEGRAM_BOT_TOKEN == 'test_token_123'
        assert config.Config.OPENAI_API_KEY == 'test_openai_key_456'
        assert config.Config.OPENAI_ASSISTANT_ID == 'test_assistant_789'
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_application_handler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞—è–≤–æ–∫...")
    
    try:
        handler = ApplicationHandler()
        
        # –¢–µ—Å—Ç 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞
        valid_application = """
        [–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç]
        –ò–º—è: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤
        –¢–µ–ª–µ—Ñ–æ–Ω: +7 999 123-45-67
        Email: ivan@example.com
        –ó–∞–ø—Ä–æ—Å: –ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å–∞–π—Ç–∞
        """
        
        is_valid = handler.is_application(valid_application)
        print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {is_valid}")
        
        # –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞—è–≤–∫–∏
        parsed = handler.parse_application(valid_application)
        if parsed:
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: {len(parsed)} –ø–æ–ª–µ–π")
            print(f"   –ò–º—è: {parsed.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {parsed.get('phone', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"   Email: {parsed.get('email', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"   –ó–∞–ø—Ä–æ—Å: {parsed.get('request', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
        
        # –¢–µ—Å—Ç 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞
        formatted = handler.format_application_for_working_chat(valid_application, 12345)
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞")
        print(f"   –î–ª–∏–Ω–∞: {len(formatted)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞—è–≤–∫–∏
        is_valid, message = handler.validate_application(valid_application)
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞—è–≤–∫–∏: {is_valid} - {message}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∑–∞—è–≤–æ–∫: {e}")
        return False

def test_openai_client_mock():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç OpenAI —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI (–º–æ–∫)...")
    
    try:
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –º–æ–∫–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
        with patch('openai.OpenAI') as mock_openai_class:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∏–µ–Ω—Ç
            mock_client = Mock()
            mock_openai_class.return_value = mock_client
            
            # –ú–æ–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ thread
            mock_thread = Mock()
            mock_thread.id = "test_thread_123"
            mock_client.beta.threads.create.return_value = mock_thread
            
            # –ú–æ–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            mock_message = Mock()
            mock_client.beta.threads.messages.create.return_value = mock_message
            
            # –ú–æ–∫–∞–µ–º –∑–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            mock_run = Mock()
            mock_run.id = "test_run_456"
            mock_client.beta.threads.runs.create.return_value = mock_run
            
            # –ú–æ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            mock_run_status = Mock()
            mock_run_status.status = 'completed'
            mock_client.beta.threads.runs.retrieve.return_value = mock_run_status
            
            # –ú–æ–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            mock_assistant_message = Mock()
            mock_assistant_message.role = "assistant"
            mock_content = Mock()
            mock_content.text.value = "–ü—Ä–∏–≤–µ—Ç! –Ø –°–∞–Ω—è, –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
            mock_assistant_message.content = [mock_content]
            
            mock_messages = Mock()
            mock_messages.data = [mock_assistant_message]
            mock_client.beta.threads.messages.list.return_value = mock_messages
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –º–æ–∫-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            with patch('config.Config.OPENAI_API_KEY', 'test_key'):
                with patch('config.Config.OPENAI_ASSISTANT_ID', 'test_assistant'):
                    client = OpenAIClient()
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ thread
                    thread_id = client.create_thread(12345)
                    assert thread_id == "test_thread_123"
                    print("‚úÖ Thread —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    response = client.send_message(12345, "–ü—Ä–∏–≤–µ—Ç!")
                    assert "–°–∞–Ω—è" in response
                    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–ª–∏–µ–Ω—Ç–µ OpenAI: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ Synaplink...\n")
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫", test_application_handler),
        ("–ö–ª–∏–µ–Ω—Ç OpenAI", test_openai_client_mock)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False

if __name__ == "__main__":
    # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
    for key in ['TELEGRAM_BOT_TOKEN', 'OPENAI_API_KEY', 'OPENAI_ASSISTANT_ID']:
        if key in os.environ:
            del os.environ[key]
    
    success = run_all_tests()
    
    if success:
        print("\n‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        sys.exit(1)
