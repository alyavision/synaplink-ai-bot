"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç
"""

import re
import logging
from typing import Dict, Optional, Tuple

logger = logging.getLogger(__name__)

class ApplicationHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞—è–≤–æ–∫"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
        self.application_patterns = {
            'header': r'\[–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç\]',
            'name': r'–ò–º—è:\s*(.+)',
            'phone': r'–¢–µ–ª–µ—Ñ–æ–Ω:\s*(.+)',
            'email': r'Email:\s*(.+)',
            'request': r'–ó–∞–ø—Ä–æ—Å:\s*(.+)',
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞—è–≤–∫–∏
        self.application_indicators = [
            '–∑–∞—è–≤–∫–∞',
            '–∑–∞–∫–∞–∑',
            '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
            '—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ',
            '—É—Å–ª—É–≥–∞',
            '–ø—Ä–æ–µ–∫—Ç'
        ]
    
    def is_application(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–æ–π
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not text:
            return False
        
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞—è–≤–∫–∏
        if self._check_main_patterns(text):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        if self._check_indicators(text_lower):
            return True
        
        return False
    
    def _check_main_patterns(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞—è–≤–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if not re.search(self.application_patterns['header'], text):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['name', 'phone', 'email', 'request']
        found_fields = 0
        
        for field in required_fields:
            if re.search(self.application_patterns[field], text):
                found_fields += 1
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 3 –ø–æ–ª—è –∏–∑ 4
        return found_fields >= 3
    
    def _check_indicators(self, text_lower: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞—è–≤–∫–∏"""
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –∑–∞—è–≤–∫—É
        indicator_count = 0
        
        for indicator in self.application_indicators:
            if indicator in text_lower:
                indicator_count += 1
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—è–≤–∫–∞
        return indicator_count >= 2
    
    def parse_application(self, text: str) -> Optional[Dict[str, str]]:
        """
        –ü–∞—Ä—Å–∏—Ç –∑–∞—è–≤–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Args:
            text: –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
            
        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ –∑–∞—è–≤–∫–∏ –∏–ª–∏ None –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
        """
        try:
            application_data = {}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            for field, pattern in self.application_patterns.items():
                match = re.search(pattern, text)
                if match:
                    if field == 'header':
                        application_data[field] = match.group(0)
                    else:
                        application_data[field] = match.group(1).strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            if len(application_data) >= 4:  # header + 3 –ø–æ–ª—è
                return application_data
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∑–∞—è–≤–∫–∏: {e}")
            return None
    
    def format_application_for_working_chat(self, application_text: str, user_id: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç
        
        Args:
            application_text: –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞
        """
        try:
            # –ü–∞—Ä—Å–∏–º –∑–∞—è–≤–∫—É
            app_data = self.parse_application(application_text)
            
            if app_data:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                formatted = (
                    f"üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}\n\n"
                    f"üìã {app_data.get('header', '[–ó–∞—è–≤–∫–∞]')}\n\n"
                    f"üë§ –ò–º—è: {app_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {app_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üìß Email: {app_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üí¨ –ó–∞–ø—Ä–æ—Å: {app_data.get('request', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                    f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {self._get_current_time()}"
                )
            else:
                # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                formatted = (
                    f"üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}\n\n"
                    f"üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n{application_text}\n\n"
                    f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {self._get_current_time()}"
                )
            
            return formatted
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return (
                f"üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}\n\n"
                f"üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{application_text}\n\n"
                f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}"
            )
    
    def _get_current_time(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime
        return datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    def validate_application(self, application_text: str) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Args:
            application_text: –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            Tuple[bool, str]: (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        if not application_text:
            return False, "–ó–∞—è–≤–∫–∞ –ø—É—Å—Ç–∞—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if len(application_text.strip()) < 50:
            return False, "–ó–∞—è–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if not re.search(r'@|—Ç–µ–ª–µ—Ñ–æ–Ω|phone|\+7|\d{10,}', application_text.lower()):
            return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        if not re.search(r'–∑–∞–ø—Ä–æ—Å|–≤–æ–ø—Ä–æ—Å|–∏–Ω—Ç–µ—Ä–µ—Å|–Ω—É–∂–Ω–æ|—Ö–æ—á—É', application_text.lower()):
            return False, "–ù–µ —É–∫–∞–∑–∞–Ω –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–æ–ø—Ä–æ—Å"
        
        return True, "–ó–∞—è–≤–∫–∞ –≤–∞–ª–∏–¥–Ω–∞"
